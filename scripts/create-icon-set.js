/* eslint-disable quote-props */
/* react icon set creator v1.0.1 */

const fs = require('fs');
const path = require('path');
const clipboardy = require('clipboardy');
const SVGO = require('svgo-sync');


// TODO: merge sets

/* settings */
const inputFolder = '../resources/icons/';
const outputFile = '../src/data/icons.json';
const input = {
  traddalberto: `
  <svg width="428" height="261" viewBox="0 0 428 261" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M59.3528 5.50264H32.5314V94.2116H26.6118V5.50264H0V0.108887H59.3528V5.50264Z" fill="#42515A"/>
  <path d="M91.4651 37.132H91.0461C91.4651 37.132 89.003 36.8178 83.6073 36.1894C77.4782 36.1371 72.292 38.8078 68.1012 44.2015C64.1199 49.3334 62.0769 56.6648 62.0769 66.1955V94.5782H56.6812V31.0575H62.0769V43.4684C67.2106 34.985 74.6494 30.7957 84.3931 30.7957C85.1265 30.9004 87.4838 31.2146 91.4651 31.7906V37.132Z" fill="#42515A"/>
  <path d="M161.609 94.2116H156.109V82.3768C152.651 87.1945 147.78 90.8078 141.598 93.2166C137.879 94.6829 133.897 95.3637 129.759 95.3637C120.015 95.3637 112.21 92.3264 106.343 86.2519C100.423 80.125 97.4895 72.1653 97.4895 62.4775C97.4895 52.5802 100.318 44.6205 106.028 38.7031C111.791 32.5762 119.649 29.4865 129.549 29.4865C140.865 29.4865 149.718 34.1995 156.161 43.5731V30.5862H161.714V94.2116H161.609ZM156.109 74.3123V65.7242C156.109 56.8219 154.013 49.5953 149.77 43.9921C145.056 37.7081 138.403 34.5137 129.759 34.5137C121.587 34.5137 115.091 37.1321 110.272 42.4211C105.609 47.5006 103.252 54.1512 103.252 62.4251C103.252 70.8038 105.557 77.4543 110.114 82.4815C114.881 87.7182 121.43 90.2841 129.707 90.2841C133.95 90.2841 137.879 89.3939 141.546 87.6134C147.884 84.4191 152.756 80.0203 156.109 74.3123Z" fill="#42515A"/>
  <path d="M233.011 5.13608L232.958 94.264H227.406V82.4291C223.948 87.2468 219.129 90.8601 212.895 93.269C209.175 94.7353 205.194 95.416 201.056 95.416C191.312 95.416 183.506 92.3788 177.639 86.3043C171.72 80.1774 168.786 72.2176 168.786 62.5298C168.786 52.6325 171.615 44.6728 177.325 38.7554C183.087 32.6285 190.945 29.5389 200.846 29.5389C212.161 29.5389 221.067 34.2519 227.51 43.6255V5.13608H233.011ZM227.406 74.3123V65.7242C227.406 56.8219 225.31 49.5953 221.067 43.9921C216.352 37.7081 209.699 34.5137 201.056 34.5137C192.883 34.5137 186.388 37.1321 181.568 42.4211C176.906 47.5006 174.549 54.1512 174.549 62.4251C174.549 70.7514 176.853 77.4543 181.411 82.4815C186.231 87.7181 192.726 90.2841 201.003 90.2841C205.246 90.2841 209.175 89.3939 212.842 87.6134C219.233 84.4191 224.053 80.0203 227.406 74.3123Z" fill="#42515A"/>
  <path d="M68.5304 168.624C68.5304 182.083 65.4921 192.923 59.4153 201.196C52.5528 210.465 42.652 215.126 29.608 215.126H11.954C9.28239 215.126 6.87265 214.288 4.62008 212.612C1.84364 210.57 0.429234 207.742 0.429234 204.234L0.324463 132.073H0.376848C0.376848 128.721 1.42456 126.103 3.51998 124.113C5.66779 122.123 8.39183 121.18 11.7969 121.18L27.4602 121.128C40.347 121.076 50.5622 125.893 58.1581 135.476C65.073 144.222 68.5304 155.271 68.5304 168.624ZM62.5061 168.467C62.5061 156.633 59.6249 146.892 53.9149 139.247C47.5238 130.711 38.5659 126.417 27.1982 126.417H11.273C7.81559 126.941 6.08687 128.774 6.08687 131.968L6.19164 204.181C6.19164 207.376 7.92036 209.261 11.3778 209.732L29.2413 209.785C40.7137 209.785 49.3049 205.595 55.015 197.164C60.044 190.042 62.5061 180.459 62.5061 168.467Z" fill="#42515A"/>
  <path d="M137.103 215.283H131.707V203.762C128.355 208.475 123.64 211.984 117.616 214.341C114.001 215.754 110.177 216.435 106.143 216.435C96.7139 216.435 89.118 213.45 83.408 207.533C77.698 201.563 74.8168 193.813 74.8168 184.334C74.8168 174.699 77.5932 166.949 83.0937 161.136C88.6989 155.166 96.2948 152.181 105.934 152.181C116.935 152.181 125.526 156.737 131.76 165.901V153.281H137.156V215.283H137.103ZM131.707 195.855V187.476C131.707 178.784 129.664 171.714 125.578 166.268C121.021 160.141 114.525 157.051 106.143 157.051C98.1807 157.051 91.8945 159.617 87.2321 164.749C82.727 169.724 80.422 176.218 80.422 184.23C80.422 192.399 82.6222 198.892 87.075 203.762C91.6849 208.842 98.0236 211.408 106.143 211.408C110.229 211.408 114.054 210.518 117.616 208.79C123.745 205.7 128.46 201.406 131.707 195.855Z" fill="#42515A"/>
  <path d="M149.571 215.178H144.175V123.432H149.571V215.178Z" fill="#42515A"/>
  <path d="M219.139 183.968C219.139 193.446 216.258 201.196 210.548 207.166C204.838 213.084 197.294 216.069 187.76 216.069C183.726 216.069 179.902 215.388 176.287 213.974C170.211 211.617 165.496 208.109 162.196 203.396V214.917H156.8L156.748 214.864V123.432H162.143V165.535C168.43 156.371 177.073 151.815 188.022 151.815C197.661 151.815 205.257 154.8 210.862 160.77C216.362 166.582 219.139 174.332 219.139 183.968ZM213.481 183.863C213.481 175.851 211.229 169.358 206.671 164.383C202.009 159.251 195.723 156.685 187.76 156.685C179.273 156.685 172.778 159.722 168.272 165.849C164.186 171.295 162.196 178.365 162.196 187.11V195.489C165.444 201.039 170.158 205.333 176.287 208.371C179.85 210.099 183.674 210.989 187.76 210.989C195.775 210.989 202.061 208.423 206.723 203.291C211.229 198.421 213.481 191.928 213.481 183.863Z" fill="#42515A"/>
  <path d="M330.563 159.199H330.196C330.615 159.199 328.206 158.884 322.967 158.308C317.047 158.256 312.018 160.874 307.88 166.111C304.003 171.086 302.065 178.26 302.065 187.581V215.283H296.827V153.281H302.065V165.378C307.042 157.156 314.271 153.019 323.753 153.019C324.486 153.124 326.791 153.438 330.615 153.962V159.199H330.563Z" fill="#42515A"/>
  <path d="M360.318 158.413H343.502V202.715C343.502 207.742 345.283 210.256 348.898 210.256H352.617V215.231H349.841C342.035 215.231 338.106 211.199 338.106 203.186V135.738H343.502V153.281H360.318V158.413Z" fill="#42515A"/>
  <path d="M428 184.334C428 193.708 425.119 201.406 419.356 207.428C413.646 213.45 406.103 216.488 396.778 216.488C387.506 216.488 379.962 213.45 374.148 207.428C368.333 201.354 365.452 193.656 365.452 184.334C365.452 175.013 368.333 167.315 374.148 161.241C379.962 155.166 387.506 152.129 396.778 152.129C406.103 152.129 413.646 155.166 419.461 161.293C425.119 167.263 428 174.961 428 184.334ZM422.342 184.177C422.342 176.27 420.09 169.777 415.532 164.749C410.87 159.617 404.636 156.999 396.778 156.999C388.92 156.999 382.634 159.565 377.867 164.749C373.362 169.724 371.057 176.218 371.057 184.177C371.057 192.137 373.31 198.578 377.867 203.605C382.582 208.79 388.868 211.356 396.778 211.356C404.584 211.356 410.818 208.737 415.48 203.553C420.037 198.473 422.342 191.98 422.342 184.177Z" fill="#42515A"/>
  <path d="M289.545 186.115C289.755 185.329 289.859 184.387 289.859 183.287C289.859 174.28 286.926 166.844 281.059 160.979C275.191 155.062 267.753 152.129 258.742 152.129C249.47 152.129 241.927 155.166 236.112 161.241C230.297 167.315 227.416 175.013 227.416 184.334C227.416 193.813 230.349 201.563 236.269 207.533C242.188 213.45 249.942 216.435 259.423 216.435C271.158 216.435 280.063 213.346 286.035 207.219L282.054 203.448C279.644 205.962 276.134 207.952 271.524 209.418C267.438 210.727 263.405 211.408 259.423 211.408C251.827 211.408 245.646 209.104 240.879 204.496C230.245 194.127 230.402 173.966 241.141 163.754C245.751 159.303 251.618 157.104 258.795 157.104C265.919 157.104 271.786 159.303 276.344 163.754C280.901 168.153 283.521 173.914 284.254 181.035H262.095V186.167H289.545V186.115Z" fill="#42515A"/>
  <path d="M8.85326 245.488L3.56193 259.524H1.36157L7.6483 242.87H10.163L16.2926 259.524H13.935L8.85326 245.488Z" fill="#42515A"/>
  <path d="M418.539 245.489L413.247 259.525H411.047L417.334 242.871H419.848L425.978 259.525H423.62L418.539 245.489Z" fill="#42515A"/>
  <path d="M49.1411 259.525H47.0455V242.871H51.6034C55.1659 242.871 57.3139 244.704 57.3139 247.741C57.3139 249.627 56.4756 251.093 54.9039 251.931C54.1181 252.35 53.3323 252.507 51.813 252.612L58.3093 259.525H55.6374L49.1411 252.56V259.525ZM51.2367 251.093C53.7514 251.093 55.1135 249.941 55.1135 247.846C55.1135 245.751 53.8562 244.652 51.551 244.652H49.0887V251.093H51.2367Z" fill="#42515A"/>
  <path d="M103.783 260.048L102.002 258.058C100.378 259.315 98.8585 259.839 96.9725 259.839C94.7198 259.839 92.4147 258.791 90.843 257.063C89.5332 255.597 88.8522 253.659 88.8522 251.302C88.8522 246.327 92.3623 242.556 97.0773 242.556C101.74 242.556 105.25 246.222 105.25 251.145C105.25 253.345 104.674 255.021 103.469 256.697L105.302 258.687L103.783 260.048ZM101.95 255.178C102.683 253.869 102.997 252.769 102.997 251.25C102.997 247.375 100.43 244.547 96.9725 244.547C95.1389 244.547 93.3577 245.437 92.2575 246.903C91.4193 248.003 90.9477 249.522 90.9477 251.25C90.9477 255.125 93.4624 257.953 96.9201 257.953C98.387 257.953 99.3824 257.587 100.587 256.592L99.3301 255.125L100.745 253.869L101.95 255.178Z" fill="#42515A"/>
  <path d="M138.36 252.769C138.36 254.916 138.674 255.964 139.46 256.749C140.141 257.43 141.346 257.849 142.394 257.849C143.442 257.849 144.594 257.378 145.328 256.644C146.218 255.754 146.428 254.916 146.428 252.717V242.871H148.576V252.769C148.576 255.283 148.157 256.697 147.109 257.901C146.009 259.158 144.332 259.891 142.394 259.891C140.455 259.891 138.674 259.158 137.522 257.797C136.474 256.644 136.16 255.388 136.16 252.821V242.871H138.255V252.769H138.36Z" fill="#42515A"/>
  <path d="M181.057 259.525H178.962V242.871H181.057V259.525Z" fill="#42515A"/>
  <path d="M216.106 259.525H214.01V244.652H209.767V242.871H220.349V244.652H216.106V259.525Z" fill="#42515A"/>
  <path d="M251.05 250.255H257.651V252.036H251.05V257.744H257.651V259.525H248.954V242.871H257.651V244.652H251.05V250.255Z" fill="#42515A"/>
  <path d="M293.381 259.525H291.285V244.652H287.041V242.871H297.624V244.652H293.381V259.525Z" fill="#42515A"/>
  <path d="M328.795 252.769C328.795 254.916 329.11 255.964 329.895 256.749C330.577 257.43 331.782 257.849 332.829 257.849C333.877 257.849 335.082 257.378 335.763 256.644C336.654 255.754 336.863 254.916 336.863 252.717V242.871H339.011V252.769C339.011 255.283 338.592 256.697 337.544 257.901C336.444 259.158 334.768 259.891 332.829 259.891C330.891 259.891 329.11 259.158 327.957 257.797C326.909 256.644 326.595 255.388 326.595 252.821V242.871H328.691V252.769H328.795Z" fill="#42515A"/>
  <path d="M372.017 259.525H369.921V242.871H374.479C378.041 242.871 380.189 244.704 380.189 247.741C380.189 249.627 379.351 251.093 377.779 251.931C376.994 252.35 376.208 252.507 374.688 252.612L381.185 259.525H378.513L372.017 252.507V259.525ZM374.112 251.093C376.627 251.093 377.989 249.941 377.989 247.846C377.989 245.751 376.732 244.652 374.426 244.652H371.964V251.093H374.112Z" fill="#42515A"/>
  <path d="M335.425 6.44528H274.134V45.7202H335.425V6.44528Z" fill="#42515A"/>
  <path d="M380.476 15.8712H340.139V45.7202H380.476V15.8712Z" fill="#42515A"/>
  <path d="M335.425 50.4331H300.326V92.8501H335.425V50.4331Z" fill="#42515A"/>
  <path d="M394.62 50.4331H340.139V78.1874H394.62V50.4331Z" fill="#42515A"/>
  </svg>



  `
};
const renames = {
  'turn-left': 'left',
  'turn-right': 'right',
};
/* settings end */

/* code start */
const icons = {};

const svgo = new SVGO({
  plugins: [{ convertShapeToPath: true }, { mergePaths: true }],
});

function isNumericStr(str) {
  return /^\d+\.\d+$/.test(str);
}

function forEachMatch(regex, string, callback) {
  let result;
  while ((result = regex.exec(string)) !== null) {
    callback(...result);
  }
}

// function ifHasProp(prop, string, callback) {
//   const match = RegExp(`${prop}="(.+)"`, 'g').exec(string);
//   if (match[1]) callback(match[1]);
// }

function convertSvg(content) {
  // get viewBox
  const viewBox = /viewBox="(.*?)"/g.exec(content)[1];
  let paths = [];
  const rects = [];
  let colors = [];
  let finalContent = content;
  let colorIndex = 1;

  // get colors
  forEachMatch(/fill="(.+?)"/g, content, (full, color) => {
    if (color !== 'none' && !colors.includes(color)) {
      finalContent = finalContent.replace(RegExp(color, 'g'), colorIndex);
      colors.push(color);
      colorIndex++;
    }
  });

  // check colors
  if (colors.length < 2) {
    colors = [];
    finalContent = finalContent.replace(/fill=".+?"/g, '');
  }

  // get paths
  forEachMatch(/<path.+?\/>/g, finalContent, (fullMatch) => {
    const elem = {};

    forEachMatch(/(\S+?)="(.+?)"/g, fullMatch, (full, prop, value) => {
      elem[prop] = isNumericStr(value) ? Number(value) : value;
    });

    paths.push(elem);
  });

  paths = paths.map(elem => Object.keys(elem).reduce((object, key) => {
    if (['fill-rule', 'clip-rule'].includes(key)) {
      object.evenodd = true;
    } else {
      object[key] = elem[key];
    }

    return object;
  }, {}));

  // get rects
  forEachMatch(/<rect.+?\/>/g, finalContent, (fullMatch) => {
    const elem = {};

    forEachMatch(/(\S+?)="(.+?)"/g, fullMatch, (full, prop, value) => {
      elem[prop] = isNumericStr(value) ? Number(value) : value;
    });

    rects.push(elem);
  });

  if (paths.length === 0 && rects.length === 0) {
    return false;
  }

  return {
    viewBox,
    ...colors.length > 0 && { colors },
    ...paths.length > 0 && { paths },
    ...rects.length > 0 && { rects },
  };
}

function addIcon(name, fileDir) {
  // const data = fs.readFileSync(fileDir, 'utf8');
  const { data } = svgo.optimizeSync(fs.readFileSync(fileDir, 'utf8'));

  const convertedSvg = convertSvg(data);

  if (!convertedSvg) {
    console.error(`ERR! svg '${name}' has invalid elements`);
  } else {
    icons[renames[name] || name] = convertedSvg;
  }
}

function addSVGFromFolder(folder, prefix = '') {
  const files = fs.readdirSync(folder);

  files.forEach((file) => {
    const fileDir = path.join(folder, file);
    const fileName = path.basename(fileDir, '.svg');

    if (fs.statSync(fileDir).isDirectory()) {
      addSVGFromFolder(fileDir, `${prefix}${fileName}-`);
    } else {
      addIcon(`${prefix}${fileName}`, fileDir);
    }
  });
}

const inputIcons = Object.keys(input);

if (!input[inputIcons[0]]) {
  addSVGFromFolder(path.join(__dirname, inputFolder));

  fs.writeFile(path.join(__dirname, outputFile), JSON.stringify(icons, null, 2), (err) => {
    if (err) throw err;

    console.log('JSON svg icon set created!');
  });
} else {
  let copyIcons = '';

  inputIcons.forEach((icon) => {
    const { data } = svgo.optimizeSync(input[icon]);
    copyIcons = `${copyIcons}"${icon}": ${JSON.stringify(convertSvg(data), null, 2)},\n`;
  });

  copyIcons = copyIcons.slice(0, -2);

  clipboardy.writeSync(copyIcons);
  process.stdout.write(`${copyIcons}\n\n Copied to clipboard!`);
}
